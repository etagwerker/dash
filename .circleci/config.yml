# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build-rails-6-1:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.7.3-node-browsers
         environment:
           - PGHOST=localhost
           - PGUSER=ubuntu
           - RAILS_ENV=test
           - RACK_ENV=test
           - DATABASE_URL: postgres://ubuntu@localhost:5432/dash_test
       - image: circleci/postgres:9.6.2
         environment:
           - POSTGRES_USER=ubuntu
           - POSTGRES_DB=dash_test
       - image: redis
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-current-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-current-
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem update bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle
            bundle exec rake assets:precompile

      - save_cache:
          paths:
            - ./vendor/bundle
            - ./node_modules
          key: v1-dependencies-current-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            echo "Testing with $(bundle exec rails --version)"
            bundle exec rspec --format progress \
                              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: coverage
  build-rails-7-0:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.7.3-node-browsers
         environment:
           - BUNDLE_GEMFILE=Gemfile.next
           - PGHOST=localhost
           - PGUSER=ubuntu
           - RAILS_ENV=test
           - RACK_ENV=test
           - DATABASE_URL: postgres://ubuntu@localhost:5432/dash_test
       - image: circleci/postgres:9.6.2
         environment:
           - POSTGRES_USER=ubuntu
           - POSTGRES_DB=dash_test
       - image: redis
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-next-{{ checksum "Gemfile.next.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-next-
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem update bundler
            export BUNDLE_GEMFILE=Gemfile.next
            bundle update rails --jobs=4 --retry=3
            bundle exec rake assets:precompile

      - save_cache:
          paths:
            - ./vendor/bundle
            - ./node_modules
          key: v1-dependencies-next-{{ checksum "Gemfile.next.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
            echo "Testing with $(bundle exec rails --version)"
            bundle exec rspec --format progress \
                              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: coverage

workflows:
  version: 2
  build:
    jobs:
      - "build-rails-6-1"
      - "build-rails-7-0"